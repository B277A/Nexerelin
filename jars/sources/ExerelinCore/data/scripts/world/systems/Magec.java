package data.scripts.world.systems;

import java.awt.Color;
import java.util.List;

import com.fs.starfarer.api.Global;
import com.fs.starfarer.api.campaign.CargoAPI;
import com.fs.starfarer.api.campaign.JumpPointAPI;
import com.fs.starfarer.api.campaign.LocationAPI;
import com.fs.starfarer.api.campaign.OrbitAPI;
import com.fs.starfarer.api.campaign.PlanetAPI;
import com.fs.starfarer.api.campaign.SectorAPI;
import com.fs.starfarer.api.campaign.SectorEntityToken;
import com.fs.starfarer.api.campaign.StarSystemAPI;
import com.fs.starfarer.api.campaign.CargoAPI.CrewXPLevel;
import com.fs.starfarer.api.fleet.FleetMemberType;

public class Magec {

	public void generate(SectorAPI sector) {
		StarSystemAPI system = sector.createStarSystem("Magec");
		LocationAPI hyper = Global.getSector().getHyperspace();
		
		system.setBackgroundTextureFilename("graphics/backgrounds/background4.jpg");
		
		// create the star and generate the hyperspace anchor for this system
		PlanetAPI star = system.initStar("magec", // unique id for this star
										 "star_blue", // id in planets.json
										 700f, 700*1.25f);		// radius (in pixels at default zoom)
		
		system.setLightColor(new Color(200, 240, 255)); // light color in entire system, affects all entities
		

		/*
		 * addPlanet() parameters:
		 * 1. Unique id for this planet (or null to have it be autogenerated)
		 * 2. What the planet orbits (orbit is always circular)
		 * 3. Name
		 * 4. Planet type id in planets.json
		 * 5. Starting angle in orbit, i.e. 0 = to the right of the star
		 * 6. Planet radius, pixels at default zoom
		 * 7. Orbit radius, pixels at default zoom
		 * 8. Days it takes to complete an orbit. 1 day = 10 seconds.
		 */
		PlanetAPI magec1 = system.addPlanet("chaxiraxi", star, "Chaxiraxi", "gas_giant", 0, 280, 1750, 40);
		magec1.getSpec().setPlanetColor(new Color(50,100,255,255));
		magec1.getSpec().setAtmosphereColor(new Color(120,130,100,150));
		magec1.getSpec().setCloudColor(new Color(195,230,255,200));
		magec1.getSpec().setIconColor(new Color(120,130,100,255));
		magec1.applySpecChanges();
		magec1.setCustomDescriptionId("planet_chaxiraxi");
		
		PlanetAPI magec2 = system.addPlanet("maxios", star, "Maxios", "barren", 230, 100, 2650, 100);
		magec2.setCustomDescriptionId("planet_maxios");
		magec2.getSpec().setGlowTexture(Global.getSettings().getSpriteName("hab_glows", "asharu"));
		magec2.getSpec().setGlowColor(new Color(255,245,235,255));
		magec2.getSpec().setUseReverseLightForGlow(true);
		magec2.applySpecChanges();
		// TODO: some dustballs amongst the rings
		
		// And herrrrre's Achaman
		PlanetAPI magec3 = system.addPlanet("achaman", star, "Achaman", "star_white", 45, 120, 8000, 1000);
		magec3.setCustomDescriptionId("star_white_dwarf");
		
		SectorEntityToken relay = system.addCustomEntity("achaman_relay", // unique id
				 "Achaman Relay", // name - if null, defaultName from custom_entities.json will be used
				 "comm_relay", // type of object, defined in custom_entities.json
				 "tritachyon"); // faction
		relay.setCircularOrbit(system.getEntityById("achaman"), 90, 1000, 45);
		
		PlanetAPI magec3a = system.addPlanet("tibicena", magec3, "Tibicena", "rocky_metallic", 200, 80, 800, 45);
		
		/* Where are these from? Oh-- a huge csv file. Um. Will let Alex figure that one out.
		m1.setCustomDescriptionId("planet_magec_i");
		m2.setCustomDescriptionId("planet_magec_ii");
		m3.setCustomDescriptionId("planet_achaman"); Not a planet btw.
		m31.setCustomDescriptionId("planet_achaman_i");
		*/
		
		// Make Magec I proper
		/* TODO test via "star_blue" settings in planets.json 
		magec1.getSpec().setPlanetColor(new Color(200,225,255,255));
		magec1.getSpec().setAtmosphereColor(new Color(140,160,225,140));
		magec1.getSpec().setCloudColor(new Color(120,140,220,200));
		magec1.getSpec().setTilt(36);
		magec1.applySpecChanges(); */ 
		
		/*
		 * addAsteroidBelt() parameters:
		 * 1. What the belt orbits
		 * 2. Number of asteroids
		 * 3. Orbit radius
		 * 4. Belt width
		 * 6/7. Range of days to complete one orbit. Value picked randomly for each asteroid. 
		 */
		// TODO replace these with a better dust cloud system
		system.addAsteroidBelt(star, 100, 3300, 256, 150, 250);
		system.addAsteroidBelt(star, 100, 3700, 256, 150, 250);
		
		system.addAsteroidBelt(star, 100, 4150, 128, 200, 300);
		system.addAsteroidBelt(star, 100, 4450, 188, 200, 300);
		system.addAsteroidBelt(star, 100, 4675, 256, 200, 300);
		
		
		/*
		 * addRingBand() parameters:
		 * 1. What it orbits
		 * 2. Category under "graphics" in settings.json
		 * 3. Key in category
		 * 4. Width of band within the texture
		 * 5. Index of band
		 * 6. Color to apply to band
		 * 7. Width of band (in the game)
		 * 8. Orbit radius (of the middle of the band)
		 * 9. Orbital period, in days
		 */
		
		system.addRingBand(star, "misc", "rings1", 256f, 2, Color.white, 256f, 3200, 80f);
		system.addRingBand(star, "misc", "rings1", 256f, 3, Color.white, 256f, 3400, 100f);
		system.addRingBand(star, "misc", "rings1", 256f, 2, Color.white, 256f, 3600, 130f);
		system.addRingBand(star, "misc", "rings1", 256f, 3, Color.white, 256f, 3800, 80f);
		
		system.addRingBand(star, "misc", "rings1", 256f, 2, Color.white, 256f, 4000, 80f);
		system.addRingBand(star, "misc", "rings1", 256f, 3, Color.white, 256f, 4100, 120f);
		system.addRingBand(star, "misc", "rings1", 256f, 2, Color.white, 256f, 4200, 160f);
		
//		system.addRingBand(a2, "misc", "rings1", 256f, 0, Color.white, 256f, 1700, 50f);
//		system.addRingBand(a2, "misc", "rings1", 256f, 0, Color.white, 256f, 1700, 70f);
//		system.addRingBand(a2, "misc", "rings1", 256f, 1, Color.white, 256f, 1700, 90f);
//		system.addRingBand(a2, "misc", "rings1", 256f, 1, Color.white, 256f, 1700, 110f);
		
		system.addRingBand(star, "misc", "rings1", 256f, 3, Color.white, 256f, 4300, 140f);
		system.addRingBand(star, "misc", "rings1", 256f, 3, Color.white, 256f, 4400, 180f);
		system.addRingBand(star, "misc", "rings1", 256f, 3, Color.white, 256f, 4500, 220f);
		
		system.addRingBand(star, "misc", "rings1", 256f, 0, Color.white, 256f, 4500, 100f);
		system.addRingBand(star, "misc", "rings1", 256f, 0, Color.white, 256f, 4600, 140f);
		system.addRingBand(star, "misc", "rings1", 256f, 0, Color.white, 256f, 4700, 160f);
		system.addRingBand(star, "misc", "rings1", 256f, 1, Color.white, 256f, 4800, 180f);
		
		SectorEntityToken civilianStation = system.addOrbitalStation("new_maxios", star, 0, 3900, 80, "New Maxios", "independent");
		initCivilianStationCargo(civilianStation);
		civilianStation.setCustomDescriptionId("station_new_maxios");
		
		// rumoured to have the finest cocktail lounge in the entire Sector
		SectorEntityToken tritachStation = system.addOrbitalStation("port_tse", star, 120, 4750, 175, "Port Tse Franchise Station #3", "tritachyon");
		initTritachStationCargo(tritachStation);
		tritachStation.setCustomDescriptionId("station_tse_enterprise");
			tritachStation.setInteractionImage("illustrations", "space_bar");
		
		SectorEntityToken pirateStation = system.addOrbitalStation("kantas_den", star, 240, 4250, 150, "Kanta's Den", "pirates");
		initPirateStationCargo(pirateStation);
		pirateStation.setCustomDescriptionId("station_kantas_den");
			pirateStation.setInteractionImage("illustrations", "pirate_station");
		
		JumpPointAPI jumpPoint = Global.getFactory().createJumpPoint("maxios_jump_point", "Maxios Jump Point");
		OrbitAPI orbit = Global.getFactory().createCircularOrbit(magec2, 0, 500, 30);
		jumpPoint.setOrbit(orbit);
		jumpPoint.setRelatedPlanet(magec2);
		jumpPoint.setStandardWormholeToHyperspaceVisual();
		system.addEntity(jumpPoint);
		
		
		SectorEntityToken station = system.addCustomEntity("achaman_enterprise_station", "Achaman Enterprise Station", "station_side04", "tritachyon");
		station.setCircularOrbitPointingDown(system.getEntityById("tibicena"), 90, 200, 25);		
		station.setCustomDescriptionId("station_achaman_enterprise");
		initStationCargo(station);
			tritachStation.setInteractionImage("illustrations", "hound_hangar");
		
		// example of using custom visuals below
//		a1.setCustomInteractionDialogImageVisual(new InteractionDialogImageVisual("illustrations", "hull_breach", 800, 800));
//		jumpPoint.setCustomInteractionDialogImageVisual(new InteractionDialogImageVisual("illustrations", "space_wreckage", 1200, 1200));
//		station.setCustomInteractionDialogImageVisual(new InteractionDialogImageVisual("illustrations", "cargo_loading", 1200, 1200));
		
		// generates hyperspace destinations for in-system jump points
		system.autogenerateHyperspaceJumpPoints(true, true);
		
		/*
		DiktatPatrolSpawnPoint patrolSpawn = new DiktatPatrolSpawnPoint(sector, system, 5, 3, a1);
		system.addScript(patrolSpawn);
		for (int i = 0; i < 5; i++)
			patrolSpawn.spawnFleet();

		DiktatGarrisonSpawnPoint garrisonSpawn = new DiktatGarrisonSpawnPoint(sector, system, 30, 1, a1, a1);
		system.addScript(garrisonSpawn);
		garrisonSpawn.spawnFleet();
		*/
		
		//system.addScript(new IndependentTraderSpawnPoint(sector, hyper, 1, 10, hyper.createToken(-6000, 2000), station));
	}

	private void initCivilianStationCargo(SectorEntityToken station) {
		CargoAPI cargo = station.getCargo();
		addRandomWeapons(cargo, 5);
		
		cargo.addCrew(CrewXPLevel.VETERAN, 10);
		cargo.addCrew(CrewXPLevel.REGULAR, 100);
		cargo.addMarines(20);
		cargo.addSupplies(500);
		cargo.addFuel(100);
		
		cargo.getMothballedShips().addFleetMember(Global.getFactory().createFleetMember(FleetMemberType.SHIP, "mercury_Hull"));
		cargo.getMothballedShips().addFleetMember(Global.getFactory().createFleetMember(FleetMemberType.SHIP, "hermes_Hull"));
		cargo.getMothballedShips().addFleetMember(Global.getFactory().createFleetMember(FleetMemberType.SHIP, "ox_Hull"));
		cargo.getMothballedShips().addFleetMember(Global.getFactory().createFleetMember(FleetMemberType.SHIP, "gemini_Hull"));
		cargo.getMothballedShips().addFleetMember(Global.getFactory().createFleetMember(FleetMemberType.SHIP, "buffalo_Hull"));
		cargo.getMothballedShips().addFleetMember(Global.getFactory().createFleetMember(FleetMemberType.FIGHTER_WING, "mining_drone_wing"));
		cargo.getMothballedShips().addFleetMember(Global.getFactory().createFleetMember(FleetMemberType.FIGHTER_WING, "mining_drone_wing"));
	}
	
	private void initTritachStationCargo(SectorEntityToken station) {
		CargoAPI cargo = station.getCargo();
		addRandomWeapons(cargo, 5);
		
		cargo.addCrew(CrewXPLevel.VETERAN, 10);
		cargo.addCrew(CrewXPLevel.REGULAR, 100);
		cargo.addMarines(20);
		cargo.addSupplies(500);
		cargo.addFuel(100);
		
		cargo.getMothballedShips().addFleetMember(Global.getFactory().createFleetMember(FleetMemberType.SHIP, "mercury_Hull"));
		cargo.getMothballedShips().addFleetMember(Global.getFactory().createFleetMember(FleetMemberType.SHIP, "hermes_Hull"));
		cargo.getMothballedShips().addFleetMember(Global.getFactory().createFleetMember(FleetMemberType.SHIP, "ox_Hull"));
		cargo.getMothballedShips().addFleetMember(Global.getFactory().createFleetMember(FleetMemberType.SHIP, "gemini_Hull"));
		cargo.getMothballedShips().addFleetMember(Global.getFactory().createFleetMember(FleetMemberType.SHIP, "buffalo_Hull"));
		cargo.getMothballedShips().addFleetMember(Global.getFactory().createFleetMember(FleetMemberType.FIGHTER_WING, "mining_drone_wing"));
		cargo.getMothballedShips().addFleetMember(Global.getFactory().createFleetMember(FleetMemberType.FIGHTER_WING, "mining_drone_wing"));
	}
	
	private void initPirateStationCargo(SectorEntityToken station) {
		CargoAPI cargo = station.getCargo();
		addRandomWeapons(cargo, 5);
		
		cargo.addCrew(CrewXPLevel.VETERAN, 10);
		cargo.addCrew(CrewXPLevel.REGULAR, 100);
		cargo.addMarines(20);
		cargo.addSupplies(500);
		cargo.addFuel(100);
		
		cargo.getMothballedShips().addFleetMember(Global.getFactory().createFleetMember(FleetMemberType.SHIP, "mercury_Hull"));
		cargo.getMothballedShips().addFleetMember(Global.getFactory().createFleetMember(FleetMemberType.SHIP, "hermes_Hull"));
		cargo.getMothballedShips().addFleetMember(Global.getFactory().createFleetMember(FleetMemberType.SHIP, "ox_Hull"));
		cargo.getMothballedShips().addFleetMember(Global.getFactory().createFleetMember(FleetMemberType.SHIP, "gemini_Hull"));
		cargo.getMothballedShips().addFleetMember(Global.getFactory().createFleetMember(FleetMemberType.SHIP, "buffalo_Hull"));
		cargo.getMothballedShips().addFleetMember(Global.getFactory().createFleetMember(FleetMemberType.FIGHTER_WING, "mining_drone_wing"));
		cargo.getMothballedShips().addFleetMember(Global.getFactory().createFleetMember(FleetMemberType.FIGHTER_WING, "mining_drone_wing"));
	}
	
	
	private void initStationCargo(SectorEntityToken station) {
		CargoAPI cargo = station.getCargo();
		addRandomWeapons(cargo, 5);
		
		cargo.addCrew(CrewXPLevel.VETERAN, 20);
		cargo.addCrew(CrewXPLevel.REGULAR, 500);
		cargo.addMarines(200);
		cargo.addSupplies(1000);
		cargo.addFuel(500);
		
		cargo.getMothballedShips().addFleetMember(Global.getFactory().createFleetMember(FleetMemberType.SHIP, "conquest_Hull"));
		cargo.getMothballedShips().addFleetMember(Global.getFactory().createFleetMember(FleetMemberType.SHIP, "crig_Hull"));
		cargo.getMothballedShips().addFleetMember(Global.getFactory().createFleetMember(FleetMemberType.SHIP, "crig_Hull"));
		cargo.getMothballedShips().addFleetMember(Global.getFactory().createFleetMember(FleetMemberType.SHIP, "crig_Hull"));
		cargo.getMothballedShips().addFleetMember(Global.getFactory().createFleetMember(FleetMemberType.SHIP, "ox_Hull"));
		cargo.getMothballedShips().addFleetMember(Global.getFactory().createFleetMember(FleetMemberType.SHIP, "ox_Hull"));
		cargo.getMothballedShips().addFleetMember(Global.getFactory().createFleetMember(FleetMemberType.SHIP, "ox_Hull"));
		cargo.getMothballedShips().addFleetMember(Global.getFactory().createFleetMember(FleetMemberType.SHIP, "ox_Hull"));
		cargo.getMothballedShips().addFleetMember(Global.getFactory().createFleetMember(FleetMemberType.SHIP, "ox_Hull"));
		cargo.getMothballedShips().addFleetMember(Global.getFactory().createFleetMember(FleetMemberType.FIGHTER_WING, "gladius_wing"));
		cargo.getMothballedShips().addFleetMember(Global.getFactory().createFleetMember(FleetMemberType.FIGHTER_WING, "gladius_wing"));
	}
	
	private void addRandomWeapons(CargoAPI cargo, int count) {
		List weaponIds = Global.getSector().getAllWeaponIds();
		for (int i = 0; i < count; i++) {
			String weaponId = (String) weaponIds.get((int) (weaponIds.size() * Math.random()));
			int quantity = (int)(Math.random() * 4f + 2f);
			cargo.addWeapons(weaponId, quantity);
		}
	}
	
}
